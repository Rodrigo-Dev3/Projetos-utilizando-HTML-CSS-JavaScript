body{
    font-family: 'Poppins';
}

.header{
    display: flex;
    justify-content: space-between;
    padding: 30px;

    max-width: 1440px;
    /* Sem margin no topo e no rodapé '0', mas com margin aotumática (dividindo entre esquerda e direita), centralizando o header da página */
    margin: 0 auto;
}

.header .logo{
    width: 65px;
}

.header .menu{
    display: flex;
    gap: 10px;

    align-items: center;
    /* Deve ter espaço para alinhar, por isso usa-se 100% da altura do elemento pai (header) deixando alinhado ao centro */
    height: 100%;
}

.header nav li a{
    font-weight: bold;
    color: #ffffff;
    font-size: 25px;
    /* Insere 10px no topo e no rodapé e 20px na esquerda e direita da página */
    padding: 10px 20px;

    border-radius: 50px;
    /* Ajusta o tempo da animação do hover do elemento */
    transition: 0.2s;
}

/* :hover adiciona uma pseudo-classe ao elemento 'a', ou seja, nesse caso acrescentará um hover quando passar o mouse por cima do elemento  */
.header nav li a:hover{
    background-color: #d5011d;
}

.container{
    max-width: 1440px;
    margin: 0 auto;

    display: flex;
    /* Somente centraliza os elementos dentro do 'container' se existir altura suficiente nesse elemento */
    align-items: center;
    /* Insere a altura suficiente para que centralize o elemento, utilizando o '100vh' para 100% do tamanho da tela da pessoa usuária  */
    /* Utiliza o 'calc()' para calcular e o tamanho total em pixels da tela e diminuir do tamanho em pixels do menu - ajusta a proporção correta */
    height: calc(100vh - 132px);

    padding: 0 30px 30px;
}

.container .imagem-titulo{
    max-width: 500px;
}

.container .description{
    color: #A8adb7;
    width: 85%;
    font-size: 18px;
    margin: 30px 0;
}

.container .button-trailer{
    background-color: #ff0021;
    color: #ffffff;
    padding: 15px;
    font-size: 18px;
    font-weight: bold;
    /* Quando o cursor parar em cima do botão, ele irá virar uma 'mãozinha'  */
    cursor: pointer;
    border: none;
    border-radius: 5%;
    text-transform: uppercase;
    /* A última propriedade é o nome do efeito que se quer adicionar, nesse caso, 'ease-in-out' - all significa em 'todas as propriedades' */
    /* Necessita a criação da animação para que seja ativada - no caso o ':hover' */
    transition: 0.5s all ease-in-out;
}

.container .button-trailer:hover{
    /* Animação de aumento de escala */
    transform: scale(1.1);
}

.background-video{
    background-color: #d5011d;
    /* O 'position: absolute' retira o elemento do contexto e cria um outro separado - como se ele jogasse esse elemento para CIMA do restante */
    position: absolute;
    /* Eixo 'z' diz respeito ao eixo de PROFUNIDADE do elemento - caso o valor seja negativo, o elemento será inserido atrás do restante */
    z-index: -1;
    width: 100vw;
    height: 100vh;

    /* 'Transborda' o vídeo para o restante da tela em que as dimensões não alcançam - preenchendo toda a tela - o 'hidden' esconde as bordas*/
    overflow: hidden;
}

.background-video .video{
    height: 100vh;
}

/* Com a pseudo-classe cria-se um elemento do tipo HTML usando o CSS - por isso o ::after */
.background-video::after{
    content: "";
    background-color: #d5011d;
    height: 100vh;
    width: 100vw;

    position: absolute;
    top: 0;
    left: 0;

    background: linear-gradient(90deg, rgba(0,0,0,1) 0%, rgba(0,0,0,0.8) 50%, rgba(0,0,0,1) 100%);
}

.modal{
    position: fixed;
    width: 100vw;
    height: 100vh;

    top: 0;
    left: 0;
    /* RGBA utiliza o grandiente - sendo o último parâmetro o indicativo da opacidade */
    background-color: rgba(52,52,50,0.749);

    /* Esconde o elemento - pode tornar visível por meio do javascript */
    visibility: hidden;
}

.content-modal{
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;

    flex-direction: column;
    border-radius: 5px;
    gap: 15px;
}

.close-modal{
    background-color: #ffffff;
    color: #f03a17;
    font-weight: bold;
    font-size: 20px;
    width: 40px;
    text-align: center;

    cursor: pointer;
    border-radius: 10px;

}

.modal iframe{
    border-width: 0;
    width: 640px;
    height: 360px;
}

/* O javascript irá tornar o elemento visível por meio desse CSS */
/* Na classe modal eu estou criando outra classe com nome 'aberto' para que possa ser manipulada depois no javascript */
.modal.aberto{
    opacity: 1;
    visibility: visible;
}